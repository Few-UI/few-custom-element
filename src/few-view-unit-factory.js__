/* eslint-env es6 */
import { hasScope } from './few-utils';

import varUnitFactory from './few-view-var-unit';
import textUnitFactory from './few-view-text-unit';
import condUnitFactory from './few-view-cond-unit';
import eachUnitFactory from './few-view-each-unit';
import nullUnitFactory from './few-view-null-unit';


let _factories = [
    textUnitFactory,
    nullUnitFactory,
    eachUnitFactory,
    condUnitFactory,
    varUnitFactory
];

/**
 * Create FewViewUnit structure based on input DOM
 * @param {Node} node DOM Node
 * @param {StringTemplateParser} parser string template parser
 * @param {boolean} skipConstant if true result without input will not be returned
 * @returns {FewViewUnit} FewViewUnit object
 */
function _createUnit( node, parser, skipConstant ) {
    let unit = null;
    if( node.nodeType !== Node.TEXT_NODE && node.nodeType !== Node.ELEMENT_NODE ||    // only process text and dom for now
        hasScope( node ) ) {                                                          // has scope defined already
            // do nothing
    } else {
        for( let idx in _factories ) {
            let factory = _factories[idx];
            if( factory.when( node ) ) {
                unit = factory.createUnit( node, parser );
                break;
            }
        }
    }
    return unit && unit.hasInput || !skipConstant ? unit : undefined;
}

export default {
    register: ( factory ) => _factories.push( factory ),
    createUnit: _createUnit
};
