# view
view:
  template:
    <form @submit="submitInfo">
      <label for="item">Todo:</label>
      <input id="item" type="text" name="item_desc" />
      <label for="status">Status:</label>
      <select id="status" name="item_status">
        <option value="Pending">Pending</option>
        <option value="Done">Done</option>
        <option value="In Progress">In Progress</option>
      </select>
      <button type="submit">Add</button>
    </form>

# action
action:
  submitInfo:
    name: few.requestUpdate
    input:
      component: ${few.getComponent(scope.target)}
      method: addTodo
      scope:
        item: ${few.getFormInput(scope.target)}

# from 'port' point of view
# - requestUpdate defines an 'output port' as 'addTodo'
# - Who will handle the port? parent? global? separate config?
#   - Global
#     - Redux is global solution. Limitation is 'action name' cannot be duplicated.
#     - postal.js is global but the handler can be at any level. Similar like redux
#   - Parent
#     - DOM Event, it makes then design more generic
#       - https://stackoverflow.com/questions/28627606/does-adding-too-many-event-listeners-affect-performance
#     - Parent Component Traversal
#   - Separate config
#     - separate config defines 'view1:port => view2:action2'
#     - when there is multiple 'view1', need a id to differenciate it.
#     - where do we put the separate config?
#       - parent view (where we design to use the component)
#         - I feel this is better - everything should have a scope.
#         - But redux way has its own credit
#       - global
#         - good for small application
#         - Easy to track and easy for debug

# Why event system is needed when we have data binding?

# Ability to call action in a sub view
